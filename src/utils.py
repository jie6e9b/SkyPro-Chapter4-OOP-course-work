from typing import List
from src.api import HH
from src.vacancy import Vacancy
from src.storage import JSONStorage


class UserInterface:
    """
    –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.
    """
    def __init__(self) -> None:
        self.api = HH()
        self.storage = JSONStorage()

    def run(self) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        while True:
            print("\n=== –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –í–ê–ö–ê–ù–°–ò–ô ===")
            print("1. –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru")
            print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            print("3. –¢–æ–ø N –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ")
            print("4. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏")
            print("5. –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
            print("0. –í—ã—Ö–æ–¥")

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == "1":
                self._search_new_vacancies()
            elif choice == "2":
                self._show_saved_vacancies()
            elif choice == "3":
                self._show_top_vacancies()
            elif choice == "4":
                self._search_by_keyword()
            elif choice == "5":
                self._clear_vacancies()
            elif choice == "0":
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    SEARCH_CONFIG = {
        'MAX_PAGES': {'default': 3, 'min': 1, 'max': 20},
        'PER_PAGE': {'default': 100, 'min': 1, 'max': 100},
        'AREAS': {
            'all': 0,
            'russia': 113,
            'moscow': 1,
            'spb': 2
        }
    }

    def _search_new_vacancies(self) -> None:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            keyword = self._get_search_keyword()
            if not keyword:
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
            search_params = self._get_search_parameters()

            print(f"üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}'...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            raw_vacancies = self.api.load_vacancies(
                keyword,
                max_pages=search_params['max_pages'],
                per_page=search_params['per_page'],
                area=search_params['area'],
                salary_from=search_params['salary_from'],
                salary_to=search_params['salary_to']
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Vacancy
            vacancies = [Vacancy.from_hh_dict(data) for data in raw_vacancies]

            if vacancies:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                self.storage.add_vacancies(vacancies)
                print(f"–ù–∞–π–¥eno –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                self._display_vacancies(vacancies[:5])

            else:
                print("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            return None

    def _get_search_keyword(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        while True:
            keyword = input("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
            if keyword:
                return keyword
            print("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def _get_search_parameters(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        return {
            'max_pages': self._get_int_input(
                "üìÑ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü",
                default=3,
                min_val=1,
                max_val=20
            ),
            'per_page': self._get_int_input(
                "üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                default=100,
                min_val=1,
                max_val=100
            ),
            'area': self._get_int_input(
                "üåç –í–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã (113-–†–æ—Å—Å–∏—è, 1-–ú–æ—Å–∫–≤–∞, —Å–º. API HH)",
                default=None,
                min_val=1,
                allow_none=True
            ),
            'salary_from': self._get_int_input(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É",
                default=None,
                min_val=0,
                allow_none=True
            ),
            'salary_to': self._get_int_input(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É",
                default=None,
                min_val=0,
                allow_none=True
            )
        }

    def _get_int_input(self, prompt: str, default: int | None = None, min_val: int | None = None,
                       max_val: int | None = None, allow_none: bool = False) -> int | None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        default_text = f" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default})" if default is not None else ""
        full_prompt = f"{prompt}{default_text}: "

        while True:
            try:
                user_input = input(full_prompt).strip()

                # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not user_input:
                    if default is not None:
                        return default
                    elif allow_none:
                        return None
                    else:
                        print("‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
                        continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                value = int(user_input)

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if min_val is not None and value < min_val:
                    print(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_val}")
                    continue

                if max_val is not None and value > max_val:
                    print(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_val}")
                    continue

                return value

            except ValueError:
                print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

    def _show_saved_vacancies(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        vacancies = self.storage.get_vacancies()
        if vacancies:
            print(f"\n–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π:")
            self._display_vacancies(vacancies)
        else:
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç")

    def _show_top_vacancies(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø N –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ"""
        try:
            n = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞: "))
            vacancies = self.storage.get_vacancies()

            if vacancies:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∑–∞—Ä–ø–ª–∞—Ç—ã
                top_vacancies = sorted(vacancies, reverse=True)[:n]
                print(f"\n–¢–æ–ø {n} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ:")
                self._display_vacancies(top_vacancies)
            else:
                print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç")

        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

    def _search_by_keyword(self) -> None:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏"""
        keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
        if keyword:
            vacancies = self.storage.get_vacancies(keyword=keyword)
            if vacancies:
                print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}':")
                self._display_vacancies(vacancies)
            else:
                print(f"–í–∞–∫–∞–Ω—Å–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    def _clear_vacancies(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏? (–¥–∞/–Ω–µ—Ç): ")
        if confirm.lower() in ['–¥–∞', 'yes', 'y']:
            self.storage.clear_storage()
            print("–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã")

    def _display_vacancies(self, vacancies: List[Vacancy]) -> None:
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
        for i, vacancy in enumerate(vacancies, 1):
            salary_info = self._format_salary(vacancy)
            print(f"\n{i}. {vacancy.title}")
            print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_info}")
            print(f"   –°—Å—ã–ª–∫–∞: {vacancy.url}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description[:100]}...")

    def _format_salary(self, vacancy: Vacancy) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if vacancy.salary_from > 0 and vacancy.salary_to > 0:
            return f"{vacancy.salary_from} - {vacancy.salary_to} {vacancy.currency}"
        elif vacancy.salary_from > 0:
            return f"–æ—Ç {vacancy.salary_from} {vacancy.currency}"
        elif vacancy.salary_to > 0:
            return f"–¥–æ {vacancy.salary_to} {vacancy.currency}"
        else:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
